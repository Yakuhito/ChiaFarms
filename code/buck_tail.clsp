; TAIL for the BUCK token
; BUCKs are minted using seeds and can be used to upgrade farms

; Another note: We can compute the SEED token's puzzle hash and curry in almost all arguments, except inner puzzle hash
; A smart thing to do is to let the user give values to seed_coin_amount and seed_coin_parent_id
; The puzzle being run is 100% the one for the SEED token since hash collisions are not an issue (yet)

(mod (
      FARM_MOD_HASH
      FARM_LAUNCHER_PUZZLE_HASH
      FARM_INNER_HASH
      (CAT_MOD_HASH_HASH SEED_TAIL_HASH_HASH) ; second hash should be done using sha256tree, like the first one
      Truths
      parent_is_cat
      lineage_proof
      delta
      inner_conditions
      (farm_launcher_id bucks_delta seed_coin_amount seed_coin_parent_id seed_coin_inner_puzzle_hash)
    )

    (include farm_puzzle_hash.clib)
    (include condition_codes.clib)
    (include announcements.clib)
    (include cat_truths.clib)
    (include curry-and-treehash.clinc)

    ; @desc returns conditions for burning tokens
    ; @param bucks_delta seeds to burn
    ; @returns a list of conditions
    (defun-inline farm_burn_conditions (bucks_delta)
        (list
            (list
                ASSERT_PUZZLE_ANNOUNCEMENT
                (sha256
                    (get_farm_puzzle_hash FARM_MOD_HASH farm_launcher_id FARM_LAUNCHER_PUZZLE_HASH FARM_INNER_HASH)
                    (sha256 FARM_REQUEST_BUCK_BURN bucks_delta (my_id_cat_truth Truths))
                )
            )
            (list CREATE_COIN_ANNOUNCEMENT (sha256 SEED_ANNOUNCE_BURN seeds_delta)) ; can't use addition for obvious reasons
            ; ASSERT_MY_COIN_ID is taken care of by the standard CAT puzzle
        )
    )

    (defconstant ANNOUNCEMENT_MORPH_BYTE 0xca)

    ; @desc returns conditions for minting new tokens (from burned seeds)
    ; @param delta tokens to mint (mojos)
    ; @returns a list of conditions
    (defun-inline bucks_mint_conditions (delta seed_coin_id)
        (list
            (list CREATE_COIN_ANNOUNCEMENT (sha256 BUCK_ANNOUNCE_MINT_FOR_SEED delta seed_coin_id)) ; can't use addition for obvious reasons
            (list ASSERT_COIN_ANNOUNCEMENT (sha256 seed_coin_id
                ; first sha256 is used to calculate announcementId
                ; second is used because CATs 'morph' all announcements from TAILs
                ; third is used to 'pack' announcement data
                (sha256 ANNOUNCEMENT_MORPH_BYTE (sha256 SEED_ANNOUNCE_BURN_FOR_BUCK delta (my_id_cat_truth Truths)))
            ))
        )
    )

    (defun-inline get_seed_coin_id ()
        (sha256
            seed_coin_parent_id
            (puzzle-hash-of-curried-function CAT_MOD_HASH
                seed_coin_inner_puzzle_hash ; INNER_PUZZLE (already hashed)
                SEED_TAIL_HASH_HASH ; TAIL_PROGRAM_HASH
                CAT_MOD_HASH_HASH ; MOD_HASH
            )
            seed_coin_amount
        )
    )

    ; main
    (if (= delta ()) ; 
        (if (> bucks_delta ())
            (c
                (ASSERT_MY_AMOUNT bucks_delta)
                (bucks_mint_conditions bucks_delta (get_seed_coin_id ()))
            )
         ; else
            (x)
    ; else
        (if (= bucks_delta ())
            (if (> () delta) ; delta < 0
                () ; allow melting
            ; else
                (x)
            )
        ; else
            (if (= delta bucks_delta)
                (if (> bucks_delta ())
                    (bucks_mint_conditions bucks_delta)
                ; else
                    (x)
                )
            ; else
                (x)
            )
        )
    )
)

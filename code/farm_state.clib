; a farm's state is built as follows:
; state - list
;   0: level - number
;   1: plant_capacity - number
;   2: upgrade_cost - number
;   3: plants - list
;        0: last_harvest_block
;        1: number
(
    (defun-inline farm_state_level (state) (f state ))
    (defun-inline farm_state_plant_capacity (state) (f (r state)))
    (defun-inline farm_state_upgrade_cost (state) (f (r (r state))))
    (defun-inline farm_state_plants (state) (f (r (r (r state)))))

    (defun-inline farm_state_plant_last_harvest_block (plant) (f plant))
    (defun-inline farm_state_plant_number (plant) (f (r plant))

    ; @desc adds some plants to the 'plants' list
    ; @param state_plants: list of plants
    ; @param plants_to_add: a single plant element (last_harvest_block number)
    ; @returns a new state_plants list
    (defun add_plants_to_list (state_plants plants_to_add)
        (if state_plants
            (if (= (farm_state_plant_last_harvest_block (f state_plants)) (farm_state_plant_last_harvest_block plants_to_add))
                (c
                    (c
                        (farm_state_plant_last_harvest_block (f state_plants))
                        (+ (farm_state_plant_number (f state_plants)) (farm_state_plant_number plants_to_add))
                    )
                    (r state_plants)
                )
            ; else
                (c (f state_plants) (add_plants_to_list (r state_plants) plants_to_add)) ; move to the next item
            )
        ; else
            plants_to_add; state_plants is empty; append plants_to_add at the end
        )
    )

    (defconstant HARVEST_TIME 1152) ; 192 = 10 minutes, so 192 * 6 = 1 hour (approx)

    ; @desc computes the number of times a plant should be harvested
    ;       e.g. if a plant makes seeds every 2 hours and 10 hours have passed, this function should return 5
    ; @param last_harvest_block the last block number that the plant was harvested on
    ; @param current_block the current block number
    ; @returns no_harvests (read @desc)
    (defun-inline get_no_harvests (last_harvest_block current_block)
        (/
            (- current_block last_harvest_block)
            HARVEST_TIME
        )
    )

    ; @desc returns the seeds generated by a plant object
    ; @param plant a single plant element (last_harvest_block number)
    ; @param current_block the current block number
    ; @returns the amount of seeds that should be minted
    (defun-inline get_seeds_from_plant (plant current_block)
        (*
            (get_no_harvests (farm_state_plant_last_harvest_block plant) current_block)
            (farm_state_plant_number plant)
        )
    )

    ; @desc computes th total number of seeds that should be minted after harvesting
    ; @param plants is state_plants (list of plants that need to be harvested)
    ; @param current_block the current block number
    ; @param seeds accumulator
    ; @returns number of seeds
    (defun get_total_seeds (plants current_block)
        (if plants
            (+
                (get_seeds_from_plant (f plants) current_block)
                (get_total_seeds (r plants) current_block)
            )
        ; else
            ()
        )
    )    

    ; @desc computes the updated plant object (after harvest)
    ; @param plant a single plant element (last_harvest_block number)
    ; @param current_block the current block number
    ; @returns a new plant object
    (defun-inline get_plant_after_harvest (plant current_block)
        (c
            (+
                (farm_state_plant_last_harvest_block plant)
                (* HARVEST_TIME (get_no_harvests (farm_state_plant_last_harvest_block plant) current_block))
            )
            (farm_state_plant_number plant)
        )
    )

    ; @desc computes the updated plant list (after harvest)
    ; @param a list of plant elements (last_harvest_block number)
    ; @param current_block the current block number
    ; @returns the updated list
    (defun-inline get_plants_after_harvest (plants current_block)
        (if plants
            (c
                (get_plant_after_harvest (f plants) current_block)
                (get_plants_after_harvest (r plants) current_block)
            )
        ; else
            ()
        )
    )

    ; @desc responsible for updating a new state
    (defun-inline update_farm_state (state current_block plants_to_add) (
        ; 1. Upgrade?
        ; 2. Harvest
        ; 3. Add plants
        ; 4. Add seeds
        ; 4. Remove plants (DO NOT ALLOW 'NOT GROWN' PLANTS)
    ))
)

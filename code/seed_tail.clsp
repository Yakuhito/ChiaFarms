; TAIL for the SEED token
; SEEDs are generated by plants sitting in a farm

; Like PLANTs, SEEDs can be minted/burned by farms
; Unlike PLANTs, SEEDs cannot be melted - they can only be converted to BUCKs
; Also, 31337 SEEDs can be minted by the project author out of thin air to get the game started (single issuance)

; note: this is one of the exceptional cases where passing in a coing id (buck_parent_id) w/0 doing any verification and then asserting some announcements is safe
; in a worst-case scenario, a malicious individual could melt seeds
; since BUCKs are also meltable, there's no point in securing this parameter

(mod (
      GENESIS_COIN_ID ; used to mint the initial SEEDs
      FARM_MOD_HASH
      FARM_LAUNCHER_PUZZLE_HASH
      FARM_INNER_HASH
      Truths
      parent_is_cat
      lineage_proof
      delta
      inner_conditions
      (farm_launcher_id buck_parent_id)
    )

    (include farm_puzzle_hash.clib)
    (include condition_codes.clib)
    (include announcements.clib)
    (include cat_truths.clib)

    ; @desc returns conditions for minting new tokens
    ; @param seeds_delta seeds to mint
    ; @returns a list of conditions
    (defun-inline farm_mint_conditions (seeds_delta)
        (list
            (list
                ASSERT_PUZZLE_ANNOUNCEMENT
                (sha256
                    (get_farm_puzzle_hash FARM_MOD_HASH farm_launcher_id FARM_LAUNCHER_PUZZLE_HASH FARM_INNER_HASH)
                    (sha256 FARM_REQUEST_SEED_MINT seeds_delta (my_id_cat_truth Truths))
                )
            )
            (list CREATE_COIN_ANNOUNCEMENT (sha256 SEED_ANNOUNCE_MINT seeds_delta)) ; can't use addition for obvious reasons
            ; ASSERT_MY_COIN_ID is taken care of by the standard CAT puzzle
        )
    )

    ; @desc returns conditions for burning tokens
    ; @param seeds_delta seeds to burn
    ; @returns a list of conditions
    (defun-inline farm_burn_conditions (seeds_delta)
        (list
            (list
                ASSERT_PUZZLE_ANNOUNCEMENT
                (sha256
                    (get_farm_puzzle_hash FARM_MOD_HASH farm_launcher_id FARM_LAUNCHER_PUZZLE_HASH FARM_INNER_HASH)
                    (sha256 FARM_REQUEST_SEED_BURN seeds_delta (my_id_cat_truth Truths))
                )
            )
            (list CREATE_COIN_ANNOUNCEMENT (sha256 SEED_ANNOUNCE_BURN seeds_delta)) ; can't use addition for obvious reasons
            ; ASSERT_MY_COIN_ID is taken care of by the standard CAT puzzle
        )
    )

    (defconstant ANNOUNCEMENT_MORPH_BYTE 0xca)

    ; @desc returns conditions for burning tokens (converting them to bucks)
    ; @param delta tokens to burn (mojos)
    ; @returns a list of conditions
    (defun-inline bucks_burn_conditions (delta buck_coin_id)
        (list
            (list CREATE_COIN_ANNOUNCEMENT (sha256 SEED_ANNOUNCE_BURN_FOR_BUCK delta buck_coin_id)) ; can't use addition for obvious reasons
            (list ASSERT_COIN_ANNOUNCEMENT (sha256 buck_coin_id
                ; first sha256 is used to calculate announcementId
                ; second is used because CATs 'morph' all announcements from TAILs
                ; third is used to 'pack' announcement data
                (sha256 ANNOUNCEMENT_MORPH_BYTE (sha256 BUCK_ANNOUNCE_MINT_FOR_SEED delta (my_id_cat_truth Truths)))
            ))
        )
    )

    ; main
    (if (= delta ()) ; 
        (if (> seeds_delta ())
            (c
                (ASSERT_MY_AMOUNT (* plants_delta 1000))
                (farm_mint_conditions plants_delta)
            )
         ; else
            (
                (ASSERT_MY_AMOUNT 31337000)
                (ASSERT_MY_PARENT_ID GENESIS_COIN_ID)
            )
    ; else
        (if (= seeds_delta ())
            (if (> () delta) ; delta < 0
                (bucks_burn_conditions delta buck_parent_id)
            ; else
                (x)
            )
        ; else
            (if (= delta (* seeds_delta 1000))
                (if (> seeds_delta ())
                    (farm_mint_conditions plants_delta)
                ; else
                    (farm_burn_conditions plants_delta)
                )
            ; else
                (x)
            )
        )
    )
)
